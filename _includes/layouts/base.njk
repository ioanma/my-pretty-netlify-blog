<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title or metadata.title }}</title>
    <meta name="description" content="{{ description or metadata.description }}">
    <link rel="stylesheet" href="{{ '/css/index.css' | url }}">
    <link rel="stylesheet" href="{{ '/css/prism-base16-monokai.dark.css' | url }}">
    <link rel="alternate" href="{{ metadata.feed.path | url }}" type="application/atom+xml" title="{{ metadata.title }}">
    <link rel="alternate" href="{{ metadata.jsonfeed.path | url }}" type="application/json" title="{{ metadata.title }}">
    <link rel="stylesheet" href="{{ '/css/bootstrap/css/bootstrap.min.css' | url }}">
  </head>
  <body>
    <header>
      <h1 class="home"><a href="{{ '/' | url }}">{{ metadata.title }}</a></h1>

      {#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
      <ul class="nav">
      {%- for entry in collections.all | eleventyNavigation %}
        <li class="nav-item{% if entry.url == page.url %} nav-item-active{% endif %}"><a href="{{ entry.url | url }}">{{ entry.title }}</a></li>
      {%- endfor %}
      </ul>
    </header>

    <main{% if templateClass %} class="{{ templateClass }}"{% endif %}>

      {{ content | safe }}
    </main>
    
    <div class="accordion" id="accordionExample">
    <div class="accordion-item">
      <h2 class="accordion-header" id="headingOne">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
          Accordion Item #1
        </button>
      </h2>
      <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
        <div class="accordion-body">
          <strong>This is the first item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
        </div>
      </div>
    </div>
    <div class="accordion-item">
      <h2 class="accordion-header" id="headingTwo">
        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
          Accordion Item #2
        </button>
      </h2>
      <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
        <div class="accordion-body">
          <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
        </div>
      </div>
    </div>
    <div class="accordion-item">
      <h2 class="accordion-header" id="headingThree">
        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
          Accordion Item #3
        </button>
      </h2>
      <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
        <div class="accordion-body">
          <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
        </div>
      </div>
    </div>
    </div>

    <form name="contact" method="POST" data-netlify="true">
      <p>
          <label>Your Name: <input type="text" id="name" name="name" /></label>   
      </p>
      <p>
          <label>Your Email: <input type="email" id="email" name="email" /></label>
      </p>
      <p>
          <label>Your Role: <select name="role[]" multiple>
          <option value="leader">Leader</option>
          <option value="follower">Follower</option>
          </select></label>
      </p>
      <p>
          <label>Message: <textarea name="message"></textarea></label>
      </p>
      <p>
          <button class="form_submit" type="submit">Send</button>
      </p>
    </form>

    <script>
        //get default border colours (to use on input when validation passes)
        var borderStylePass = document.querySelector('#name').style.border;
        //set fail border colours (to use on input when validation fails)
        var borderStyleFail = '1px solid red';
        //get the form submit button
        var submit_button = document.querySelector('.form_submit');
        //attach form event listener
        submit_button.addEventListener("click", function(event){
            //get the form "name" elemement
            var name = document.querySelector('#name');
            //get the form "email" element
            var email = document.querySelector('#email');
            //all validation is assumed to be passed until tested
            blnValidated = true;
            //change the border as it the validation passed
            name.style.border = borderStylePass;
            //if validation fails change the bln to false and change the input border colour
            if(!name.value){
                blnValidated = false;
                name.style.border = borderStyleFail;
            }
            //if validation fails change the bln to false and change the input border colour
            email.style.border = borderStylePass;
            if(!email.value){
                blnValidated = false;
                email.style.border = borderStyleFail;
            }
            //if validation failed do not allow the form to submit the data
            if(!blnValidated){
                event.preventDefault();
            }
        }, false);
    </script>

    <footer>
      <div class="container-fluid p-3 p-md-5">
        <ul class="bd-footer-links">
          <li><a href="https://github.com/twbs/bootstrap">GitHub</a></li>
          <li><a href="https://twitter.com/getbootstrap">Twitter</a></li>
          <li><a href="/docs/4.1/examples/">Examples</a></li>
          <li><a href="/docs/4.1/about/overview/">About</a></li>
        </ul>
        <p>Designed and built with all the love in the world by <a href="https://twitter.com/mdo" target="_blank" rel="noopener">@mdo</a> and <a href="https://twitter.com/fat" target="_blank" rel="noopener">@fat</a>. Maintained by the <a href="https://github.com/orgs/twbs/people">core team</a> with the help of <a href="https://github.com/twbs/bootstrap/graphs/contributors">our contributors</a>.</p>
        <p>Currently v4.1.3. Code licensed <a href="https://github.com/twbs/bootstrap/blob/main/LICENSE" target="_blank" rel="license noopener">MIT</a>, docs <a href="https://creativecommons.org/licenses/by/3.0/" target="_blank" rel="license noopener">CC BY 3.0</a>.</p>
      </div>
</footer>
    

    <!-- Current page: {{ page.url | url }} -->
    <script src="/css/bootstrap/js/bootstrap.min.js"></script>
  </body>
</html>
